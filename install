#!/bin/bash

VERSION="0.0.6-SNAPSHOT"
INSTALL_DIR=${1:-$(pwd)}
FIJI_DIR=${2:-""}

buildN5Script() {

    mainClass="$1"
    scriptName="$2"
    JNA=${3:-""}

    echo '#!/bin/bash' > $scriptName
    echo '' >> $scriptName
    echo "JAR=\$HOME/.m2/repository/org/janelia/saalfeldlab/n5-utils/${VERSION}/n5-utils-${VERSION}.jar" >> $scriptName
    echo 'java \' >> $scriptName
    if [[ ! -z $JNA ]]; then echo "$JNA"; fi >> $scriptName
    echo "  -Xmx${MEM}g \\" >> $scriptName
    if [[ $(java -version 2>&1 | grep version) =~ 1.8 ]]
        then
            echo '  -XX:+UseConcMarkSweepGC \' >> $scriptName
    fi
    echo -n '  -cp $JAR:' >> $scriptName
    echo -n $(cat cp.txt) >> $scriptName
    echo ' \' >> $scriptName
    echo "  $mainClass  \"\$@\"" >> $scriptName

}

hasHomebrewBlosc() {

    hasBrew=$(command -v brew)
    if [ ! -z $hasBrew ]
    then
        brew search c-blosc
        hasBlosc="$?"
        if [[ $hasBlosc == "0" ]]
        then
            echo "success"
            #tmp=$(brew --cellar c-blosc)
            cellarPath=$(dirname $(brew --cellar c-blosc))
            RESULTPATH=$(dirname $(find $cellarPath -name 'libblosc*'))
        else
            echo "c-blosc not found, install with:"
            echo "  brew install c-blosc"
        fi
    else
        echo "no homebrew found"
    fi
}


hasCondaBlosc () {

    hasConda=$(command -v conda)
    if [ ! -z $hasConda ]
    then
        echo "conda found"
        echo "checking for blosc"
        conda info | grep 'active environment'
        condaHasBlosc=$(conda list | grep blosc)
        if [[ ! -z $condaHasBlosc ]]
        then
            echo "success"
            RESULTPATH=$(conda info | grep 'active env location' | sed 's/.*:\s*//g')
        else
            echo "blosc not found, install with:"
            echo "  conda install blosc"
        fi
    else
        echo "no conda found"
    fi
}


echo "Installing into $INSTALL_DIR"

isMac12="0"
# check for operating system
if [[ "$OSTYPE" == "linux-gnu" ]]; then
  echo "Assuming on Linux operating system"
  MEM=$(cat /proc/meminfo | grep MemTotal | sed s/^MemTotal:\\\s*\\\|\\\s\\+[^\\\s]*$//g)
  MEM=$(($MEM/2/1024/1024))
elif [[ "$OSTYPE" == "darwin"* ]]; then
  echo "Assuming on MacOS X operating system"
  # sysctl returns total hardware memory size in bytes
  MEM=$(sysctl hw.memsize | grep hw.memsize | sed s/hw.memsize://g)
  MEM=$(($MEM/2/1024/1024/1024))

  macosVer=$(sw_vers | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+')
  if [[ $macosVer =~ ^12\..* ]]
  then
    isMac12="1"
  fi

else
  echo "ERROR - Operating system (arg2) must be either linux or osx - EXITING"
  exit
fi

JNA_LINE=""
## Locate blosc on mac12
if [[ $isMac12 == "1" ]]
then
    echo "looking"

    if [[ ! -z $FIJI_DIR ]];
    then
        JNA_LINE="-Djna.library.path=\"${FIJI_DIR}/lib/macosx\" \\"
    else
        hasHomebrewBlosc
        if [[ ! -z $RESULTPATH ]]
        then
            JNA_LINE="-Djna.library.path=\"${RESULTPATH}\" \\"
        else
            hasCondaBlosc
            if [[ ! -z $RESULTPATH ]]
            then
                JNA_LINE="-Djna.library.path=\"${RESULTPATH}/lib\" \\"
            fi
        fi
    fi
fi

echo $JNA_LINE


# mvn clean install
# temporary workaround for openjdk plus surefire bug
_JAVA_OPTIONS=-Djdk.net.URLClassPath.disableClassPathURLCheck=true mvn clean install
mvn -Dmdep.outputFile=cp.txt -Dmdep.includeScope=runtime dependency:build-classpath

buildN5Script 'org.janelia.saalfeldlab.View' n5-view "$JNA_LINE"
chmod a+x n5-view

buildN5Script 'org.janelia.saalfeldlab.cosem.ViewCosem' n5-view-cosem "$JNA_LINE"
chmod a+x n5-view-cosem

buildN5Script 'org.janelia.saalfeldlab.Copy' n5-copy "$JNA_LINE"
chmod a+x n5-copy

buildN5Script 'org.janelia.saalfeldlab.Equals' n5-equals "$JNA_LINE"
chmod a+x n5-equals

rm cp.txt

mkdir -p $INSTALL_DIR
mv n5-view $INSTALL_DIR/
mv n5-view-cosem $INSTALL_DIR/
mv n5-copy $INSTALL_DIR/
mv n5-equals $INSTALL_DIR/

